#!/bin/bash

# Nix package installation - minimal start with ranger
# Designed to gradually replace Homebrew packages

# Check if this is an extra user
if [ "{{ .extraUser }}" == "true" ]; then
  echo "Already installed by main user, skipping Nix packages."
  exit 0
fi

echo "Installing Nix packages..."

# Source Nix environment
if [ -f '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  source '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
elif [ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
  source "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi

# Check if Nix is available
if ! command -v nix-env >/dev/null 2>&1; then
  echo "❌ Nix not found. Please run prerequisites script first."
  exit 1
fi

# Configure environment
export NIXPKGS_ALLOW_UNFREE=1

if ! nix-channel --list | grep -q "^nixpkgs "; then
  echo "Adding nixpkgs-unstable channel..."
  nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
  nix-channel --update
fi

NIX_PACKAGES=(
  # ----------------------------------------------------------------------------
  # Core System & CLI Tools
  # ----------------------------------------------------------------------------
  "age"                    # Encryption with GPG keys
  "atuin"                  # Magical shell history
  "bandwhich"              # Network utilization display
  "bat"                    # Cat clone with syntax highlighting
  "borgbackup"             # Deduplicating backup program
  "borgmatic"              # BorgBackup wrapper
  "btop"                   # Resource monitor
  "chafa"                  # Image to terminal converter
  "chezmoi"                # Manage dotfiles across machines
  "cmatrix"                # Matrix digital rain effect
  "coreutils-prefixed"     # GNU core utilities with 'g' prefix
  "ctop"                   # Top-like interface for containers
  "curl"                   # Transfer data with URLs
  "direnv"                 # Environment switcher for shell
  "dockutil"               # Manage macOS Dock items
  "duf"                    # Disk Usage/Free Utility
  "eza"                    # Modern replacement for 'ls'
  "fd"                     # Simple, fast, user-friendly 'find'
  "fontconfig"             # Library for configuring fonts
  "fzf"                    # Command-line fuzzy finder
  "gh"                     # GitHub command-line tool
  "git"                    # Distributed version control
  "glances"                # System monitoring tool
  "gnumake"                # GNU make utility
  "gtrash"                 # Trash can for command-line
  "hcloud"                 # Hetzner Cloud CLI
  "htop"                   # Interactive process viewer
  "iftop"                  # Display bandwidth usage
  "jankyborders"           # Borders for macOS windows
  "lazydocker"             # Simple terminal UI for Docker
  "lazygit"                # Simple terminal UI for Git
  "lsof"                   # List open files
  "mas"                    # Mac App Store CLI
  "ncdu"                   # Disk usage analyzer
  "neofetch"               # System information tool
  "nmap"                   # Network discovery and security
  "pay-respects"           # Pay respects
  "pngpaste"               # Paste PNG into file
  "ranger"                 # Console file manager
  "ripgrep"                # Recursively searches directories
  "shellcheck"             # Shell script static analysis
  "speedtest-cli"          # Test internet bandwidth
  "starship"               # Cross-shell prompt
  "tldr"                   # Collaborative cheatsheets
  "tmux"                   # Terminal multiplexer
  "tmuxinator"             # Manage complex tmux sessions
  "tree"                   # Display directory tree
  "watch"                  # Execute a program periodically
  "wget"                   # Retrieve files from web
  "zoxide"                 # A smarter cd command


  # ----------------------------------------------------------------------------
  # AI
  # ----------------------------------------------------------------------------
  "aider-chat"
  "gemini-cli"
  "claude-code"
  "codex"

  # ----------------------------------------------------------------------------
  # Development & Programming
  # ----------------------------------------------------------------------------
  "_1password-cli"         # 1Password CLI
  "cmake"                  # Cross-platform build system
  "cyberduck"              # Cloud storage browser
  "discount"               # Markdown C implementation
  "gcc"                    # GNU Compiler Collection
  "graphviz"               # Graph visualization software
  "hey"                    # HTTP load generator
  "imagemagick"            # Convert, edit, compose images
  "k6"                     # Modern load testing tool
  "luarocks"               # Package manager for Lua
  "neovim"                 # Hyperextensible Vim-based editor
  "nixfmt"                 # Nix code formatter
  "ollama"                 # Run large language models
  "pnpm"                   # Fast, efficient package manager
  "ruff"                   # Extremely fast Python linter
  "slides"                 # Terminal presentation tool
  "stylelint"              # Linter for CSS
  "tree-sitter"            # Parser generator tool
  "trufflehog"             # Find leaked credentials
  "uv"                     # Fast Python package installer
  "vips"                   # Fast image processing library

  # ----------------------------------------------------------------------------
  # Kubernetes & Cloud
  # ----------------------------------------------------------------------------
  "k9s"                    # Kubernetes CLI To Manage Clusters
  "kind"                   # Kubernetes IN Docker
  "kubectl"                # Kubernetes command-line tool
  "kubectx"                # Switch between k8s contexts
  "kubernetes-helm"        # Kubernetes package manager
  "linkerd"                # Service mesh for Kubernetes
  "popeye"                 # Kubernetes cluster sanitizer
  "stern"                  # Multi pod log tailing
  "terraform"              # Infrastructure as Code

  # ----------------------------------------------------------------------------
  # Language-specific packages
  # ----------------------------------------------------------------------------
  # Python
  "pipenv"                 # Python dependency management
  "python3"                # The Python programming language
  "python3Packages.editorconfig" # EditorConfig for Python
  "python3Packages.isort"  # Sort Python imports
  "python3Packages.ptpython" # Advanced Python REPL
  "python3Packages.pytest" # Python testing framework

  # Node.js
  "nodePackages.cspell"    # Spell checker for code
  "nodePackages.js-beautify" # Beautifier for JavaScript
  "nodejs"                 # JavaScript runtime

  # Emacs
  "emacsPackages.editorconfig" # EditorConfig for Emacs

  # Misc
  "aspell"                 # Spell checker

  # ----------------------------------------------------------------------------
  # Databases
  # ----------------------------------------------------------------------------
  "pgcli"                  # Postgres CLI with autocompletion

  # ----------------------------------------------------------------------------
  # Conditional Packages (enable via .chezmoi.toml)
  # ----------------------------------------------------------------------------
  {{ if .podmanEnabled }}
  "podman"                 # Daemonless container engine
  "podman-compose"         # Run docker-compose.yml
  "kind"                   # Kubernetes IN Docker
  {{ end }}
  {{ if .dockerEnabled }}
  "docker"                 # Containerization platform
  "docker-compose"         # Run multi-container applications
  {{ end }}
  {{ if .goEnabled }}
  "go"                     # The Go programming language
  "gomodifytags"           # Go tool to modify struct tags
  "gotests"                # Go test generator
  "gore"                   # Go REPL
  {{ end }}
  {{ if .rustEnabled }}
  "rustc"                  # The Rust compiler
  "rustup"                 # Rust toolchain installer
  {{ end }}
)

for package in "${NIX_PACKAGES[@]}"; do
  if nix-env -iA "nixpkgs.$package" 2>/dev/null; then
    echo "✅ ** ${package} ** installed via Nix"
    if command -v brew &>/dev/null; then
      if brew list --formula | grep -q "^$package$"; then
          echo "  🗑️ Uninstalling ** ${package} ** from Homebrew..."
          brew uninstall "$package"
          echo ""
      fi
    fi
  else
    echo "❌ Failed to install ** ${package} ** via Nix (will use Homebrew fallback)"
    echo ""
  fi
done

echo ""
echo "System generations (for rollback):"
nix-env --list-generations | tail -5
