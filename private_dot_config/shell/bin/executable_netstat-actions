#!/bin/bash

# Network Analysis and Monitoring Script

# Function for extended network analysis
analyze_network() {
	echo "=== Network Analysis ==="

	echo -e "\nTop 10 IP Connections:"
	netstat -ant | grep ESTABLISHED |
		awk '{print $5}' | cut -d: -f1 |
		sort | uniq -c | sort -rn | head -n 10

	echo -e "\nConnection States:"
	netstat -ant | awk '{print $6}' |
		sort | uniq -c | sort -rn

	echo -e "\nPort Usage:"
	netstat -ant | awk '{print $4}' |
		cut -d: -f2 | sort | uniq -c | sort -rn | head -n 10
}

# Function for performance monitoring
monitor_performance() {
	echo "=== Performance Monitoring ==="

	echo -e "\nCurrent Connections by Program:"
	netstat -tulpn 2>/dev/null | grep LISTEN |
		awk '{print $7}' | sort | uniq -c | sort -rn

	echo -e "\nNetwork Statistics:"
	netstat -s | head -n 20

	echo -e "\nRouting Table:"
	netstat -r
}

# Function for network interface performance
interface_performance() {
	echo "=== Network Interface Performance ==="

	echo -e "\nInterface Statistics:"
	netstat -i

	echo -e "\nDetailed Interface Information:"
	ifconfig 2>/dev/null || ip addr

	echo -e "\nCurrent Bandwidth Usage (requires iftop):"
	if command -v iftop >/dev/null 2>&1; then
		echo "Run 'sudo iftop' in another terminal to see real-time bandwidth usage"
	else
		echo "iftop not installed. Install it for real-time bandwidth monitoring."
	fi
}

# Function to show interface statistics
show_interfaces() {
	echo "=== Network Interface Statistics ==="
	netstat -i
}

# Function to continuously monitor interface statistics
watch_interfaces() {
	local interval="${1:-1}" # Default to 1 second

	if command -v watch >/dev/null 2>&1; then
		echo "Starting continuous interface monitoring (press Ctrl+C to stop)..."
		watch -n "$interval" "netstat -i"
	else
		echo "The 'watch' command is not available on this system."
		echo "Falling back to manual refresh every $interval seconds (press Ctrl+C to stop)..."

		while true; do
			clear
			echo "=== Network Interface Statistics === (Updated: $(date))"
			netstat -i
			sleep "$interval"
		done
	fi
}

# Function for port scanning
port_scan() {
	local target=$1

	if [ -z "$target" ]; then
		echo "Usage: port_scan <target_ip>"
		return 1
	fi

	echo "=== Port Scan for $target ==="

	echo -e "\nScanning common ports..."
	for port in 21 22 23 25 53 80 110 123 143 443 465 587 993 995 3306 3389 5432 8080 8443; do
		(echo >/dev/tcp/$target/$port) >/dev/null 2>&1 && echo "Port $port is open"
	done

	echo -e "\nEstablished connections to $target:"
	netstat -ant | grep $target
}

# Function to detect multiple connection attempts (potential attacks)
detect_connection_attempts() {
	local threshold="${1:-5}" # Default threshold of 5 attempts

	echo "=== Multiple Connection Attempts (SYN_RECV) ==="
	echo "Showing IPs with more than $threshold connection attempts:"

	netstat -ant | grep SYN_RECV | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr |
		awk -v threshold="$threshold" '$1 >= threshold {print $0}'

	echo -e "\nPossible explanations:"
	echo "- High counts may indicate port scanning or connection attempts"
	echo "- Could be legitimate high traffic or potential DoS/brute force attacks"
	echo "- Check firewall logs for more information about these IPs"
}

# Function to show all established connections
show_established() {
	echo "=== All Established Connections ==="
	netstat -nat | grep ESTABLISHED

	echo -e "\nTotal established connections: $(netstat -nat | grep ESTABLISHED | wc -l)"
}

# Function to count connections by IP address
count_connections_by_ip() {
	echo "=== Connection Count by IP Address ==="
	netstat -nat | grep ESTABLISHED | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr

	echo -e "\nUnique IP addresses connected: $(netstat -nat | grep ESTABLISHED | awk '{print $5}' | cut -d: -f1 | sort | uniq | wc -l)"
}

# Main monitoring script
main_monitor() {
	echo "=== Network Monitoring Summary ==="
	echo "========================="
	local log_file="/tmp/network_status_$(date +%Y%m%d_%H%M%S).log"

	echo "=== Network Status Report ===" >"$log_file"
	date >>"$log_file"

	# Count active connections
	echo -e "\nActive connections:" >>"$log_file"
	active_count=$(netstat -ant | grep ESTABLISHED | wc -l)
	echo "      $active_count" >>"$log_file"

	# Get listening ports with appropriate command based on OS
	echo -e "\nListening ports:" >>"$log_file"
	netstat_output=$(netstat -tulpn 2>/dev/null | grep LISTEN)
	if [ -z "$netstat_output" ]; then
		# Fall back to simpler command that doesn't require root
		netstat_output=$(netstat -tuln | grep LISTEN)
		# If still empty, try the macOS-specific command
		if [ -z "$netstat_output" ] && [ "$(uname)" = "Darwin" ]; then
			netstat_output=$(netstat -anv | grep LISTEN | awk '{print $1 " " $4}')
		fi
	fi
	echo "$netstat_output" >>"$log_file"

	# Get top 5 active IPs
	echo -e "\nTop 5 active IPs:" >>"$log_file"
	netstat -ant | grep ESTABLISHED | awk '{print $5}' | awk -F: '{print $(NF-1)}' | sort | uniq -c | sort -rn | head -5 >>"$log_file"

	echo "=========================" >>"$log_file"

	# Display the log file
	cat "$log_file"

	echo -e "\nLog saved to: $log_file"
}

# Function to log network connections
monitor_connections() {
	local log_file="${1:-/tmp/network_status_$(date +%Y%m%d_%H%M%S).log}"
	local mode="${2:-foreground}"

	# Create log directory if it doesn't exist
	mkdir -p "$(dirname "$log_file")" 2>/dev/null

	echo "=== Network Status Report ===" >"$log_file"
	date >>"$log_file"

	# Count active connections
	echo "Active connections:" >>"$log_file"
	active_count=$(netstat -ant | grep ESTABLISHED | wc -l)
	echo "      $active_count" >>"$log_file"

	# Get listening ports with appropriate command based on OS
	echo "Listening ports:" >>"$log_file"
	netstat_output=$(netstat -tulpn 2>/dev/null | grep LISTEN)
	if [ -z "$netstat_output" ]; then
		# Fall back to simpler command that doesn't require root
		netstat_output=$(netstat -tuln | grep LISTEN)
		# If still empty, try the macOS-specific command
		if [ -z "$netstat_output" ] && [ "$(uname)" = "Darwin" ]; then
			netstat_output=$(netstat -anv | grep LISTEN | awk '{print $1 " " $4}')
		fi
	fi
	echo "$netstat_output" >>"$log_file"

	# Get top 5 active IPs
	echo "Top 5 active IPs:" >>"$log_file"
	netstat -ant | grep ESTABLISHED | awk '{print $5}' | awk -F: '{print $(NF-1)}' | sort | uniq -c | sort -rn | head -5 >>"$log_file"

	echo "=========================" >>"$log_file"

	if [ "$mode" != "background" ]; then
		cat "$log_file"
		echo -e "\nLog saved to: $log_file"
	fi
}

# Function to start continuous monitoring
continuous_monitor() {
	local interval="${1:-300}" # Default to 5 minutes (300 seconds)
	local log_file="${2:-/tmp/network_monitor_$(date +%Y%m%d).log}"

	echo "Starting continuous network monitoring..."
	echo "Logging to: $log_file"
	echo "Interval: $interval seconds"
	echo "Press Ctrl+C to stop"

	# Create log directory if it doesn't exist
	mkdir -p "$(dirname "$log_file")" 2>/dev/null

	while true; do
		monitor_connections "$log_file" "background"
		sleep "$interval"
	done
}

# Help function
show_help() {
	echo "Network Analysis and Monitoring Tool"
	echo "Usage: netstat-actions [OPTION]"
	echo ""
	echo "Options:"
	echo "  analyze                - Run extended network analysis"
	echo "  monitor                - Monitor network performance"
	echo "  interface              - Check network interface performance"
	echo "  interfaces             - Show network interface statistics (netstat -i)"
	echo "  watch-interfaces [sec] - Continuously monitor interface statistics (default: every 1 second)"
	echo "  portscan <target_ip>   - Scan ports on a target IP"
	echo "  summary                - Show network monitoring summary"
	echo "  attempts [threshold]   - Detect multiple connection attempts (default threshold: 5)"
	echo "  log                    - Log current network status once"
	echo "  watch [interval]       - Continuously monitor network (default: every 5 minutes)"
	echo "  established            - Show all established connections"
	echo "  count-ip               - Count connections by IP address"
	echo "  help                   - Show this help message"
	echo ""
	echo ""
	echo "Examples:"
	echo "  netstat-actions portscan 192.168.1.1"
	echo "  netstat-actions attempts 10"
	echo "  netstat-actions watch 1"
}

# Main script execution
case "$1" in
analyze)
	analyze_network
	;;
monitor)
	monitor_performance
	;;
interface)
	interface_performance
	;;
interfaces)
	show_interfaces
	;;
watch-interfaces)
	watch_interfaces "$2"
	;;
portscan)
	port_scan "$2"
	;;
summary)
	main_monitor
	;;
attempts)
	detect_connection_attempts "$2"
	;;
log)
	monitor_connections "$2"
	;;
watch)
	continuous_monitor "$2" "$3"
	;;
established)
	show_established
	;;
count-ip)
	count_connections_by_ip
	;;
help | --help | -h)
	show_help
	;;
*)
	show_help
	;;
esac
