#!/bin/bash

# Interactive pentesting environment launcher

# Get container engine from argument or default to podman
CONTAINER_ENGINE="${1:-podman}"
SHARED_DIR="$HOME/pentest_data"

# Create shared directory if it doesn't exist
mkdir -p "$SHARED_DIR"

# Function to display menu
show_menu() {
	clear
	echo "===== PENTEST ENVIRONMENT LAUNCHER ====="
	echo "1) Parrot Security OS"
	echo "2) Kali Linux (full)"
	echo "3) Kali Linux (web tools)"
	echo "4) BlackArch Linux"
	echo "5) Metasploit Framework"
	echo "6) OWASP ZAP"
	echo "7) Nuclei Scanner"
	echo "8) Ronin Security Toolkit"
	echo "0) Exit"
	echo "========================================"
}

get_options() {
	OPTIONS="--rm -it"

	echo -n "Do you want to mount a shared volume? (y/n): "
	read -r use_volume
	if [[ "$use_volume" =~ ^[Yy]$ ]]; then
		OPTIONS="$OPTIONS -v $SHARED_DIR:/data"
		echo "Shared volume will be mounted at /data inside the container"
	fi

	echo "Select network option:"
	echo "  1) Default network"
	echo "  2) Host network (direct access to host interfaces)"
	echo "  3) None (isolated)"
	echo -n "Choice [1]: "
	read -r network_choice

	case "$network_choice" in
	2)
		OPTIONS="$OPTIONS --network host"
		echo "Using host network"
		;;
	3)
		OPTIONS="$OPTIONS --network none"
		echo "Using isolated network"
		;;
	*)
		echo "Using default network"
		;;
	esac

	echo -n "Do you want to expose additional ports? (y/n): "
	read -r expose_ports
	if [[ "$expose_ports" =~ ^[Yy]$ ]]; then
		echo -n "Enter port mappings (e.g., 8080:8080 8443:8443): "
		read -r port_mappings
		for mapping in $port_mappings; do
			OPTIONS="$OPTIONS -p $mapping"
		done
	fi
}

# Main loop
while true; do
	show_menu
	echo -n "Select an option: "

	# Debugging input capture
	read -r choice
	echo "DEBUG: User selected option: '$choice'"

	case "$choice" in
	0)
		echo "DEBUG: Exiting..."
		exit 0
		;;
	1)
		IMAGE="parrotsec/security"
		NAME="parrot-security"
		;;
	2)
		IMAGE="kalilinux/kali-rolling"
		NAME="kali-linux"
		;;
	3)
		IMAGE="kalilinux/kali-tools-web"
		NAME="kali-web"
		;;
	4)
		IMAGE="blackarchlinux/blackarch"
		NAME="blackarch"
		;;
	5)
		IMAGE="metasploitframework/metasploit-framework"
		NAME="metasploit"
		;;
	6)
		IMAGE="owasp/zap2docker-stable"
		NAME="owasp-zap"
		;;
	7)
		IMAGE="projectdiscovery/nuclei"
		NAME="nuclei"
		;;
	8)
		IMAGE="roninrb/ronin"
		NAME="ronin"
		;;
	*)
		echo "DEBUG: Invalid option selected ('$choice'). Press Enter to continue..."
		read -r
		continue
		;;
	esac

	echo "Configuring container options..."
	get_options
	echo "Configuration complete. Options: $OPTIONS"

	# Check if image exists locally, pull if not
	if ! $CONTAINER_ENGINE image inspect "$IMAGE" &>/dev/null; then
		echo "Image $IMAGE not found locally. Pulling..."
		$CONTAINER_ENGINE pull "$IMAGE" || {
			echo "Failed to pull image. Press Enter to continue..."
			read -r
			continue
		}
	fi

	# Execute the container
	echo "Launching $NAME environment..."
	$CONTAINER_ENGINE run $OPTIONS --name "pentest-$NAME" "$IMAGE" || {
		echo "Failed to run container. Press Enter to continue..."
		read -r
		continue
	}

	echo "Container session ended."
	read -r
done
