# exports.sh -*- mode: sh; lexical-binding: t; -*-
# shellcheck shell=bash

# ============================================================================
# PATH Management Functions
# ============================================================================

function add_to_path() {
  # NOTE: zsh only

  # usage:
  # add_to_path prepend /path/to/prepend
  # add_to_path append /path/to/append

  if [ -d "$2" ]; then
    # If the given path exist, proceed...
    if [[ ":$PATH:" == *":$2:"* ]]; then
      remove_from_path "$2"
    fi

    if [ "$1" = "prepend" ]; then
      PATH="$2:$PATH"
      export PATH
    elif [ "$1" = "append" ]; then
      PATH="$PATH:$2"
      export PATH
    else
      echo "Unknown option. Use 'prepend' or 'append'."
    fi
  fi
}

function remove_from_path() {
  # NOTE: zsh only

  # usage:
  # remove_from_path /path/to/remove

  local path_to_remove="$1"
  if [[ -n "$path_to_remove" && ":$PATH:" == *":$path_to_remove:"* ]]; then
    while [[ ":$PATH:" == *":$path_to_remove:"* ]]; do
      # Remove
      PATH="${PATH/#$path_to_remove:/}"   # If it's at the beginning
      PATH="${PATH/%:$path_to_remove/}"   # If it's at the end
      PATH="${PATH//:$path_to_remove:/:}" # If it's in the middle
    done
    PATH="${PATH#:}" # Remove leading colon
    PATH="${PATH%:}" # Remove trailing colon
    export PATH
  fi
}

# ============================================================================
# Shell Detection
# ============================================================================
# Determines which shell is being used and sets debug flags accordingly

if [ -n "${ZSH_VERSION}" ]; then
  shell="zsh"
  export DOTFILES_DEBUG_SHELL_ZSH="true"
elif [ -n "${BASH_VERSION}" ]; then
  shell="bash"
  export DOTFILES_DEBUG_SHELL_BASH="true"
else
  shell=""
fi

# ============================================================================
# Package Manager Configuration
# ============================================================================
# Homebrew, Nix, and other package manager settings

# NOTE: brew shellenv exports several environment variables and extends $PATH
if [ -f /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
  brew_prefix="$(brew --prefix)"
elif [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  brew_prefix="$(brew --prefix)"
else
  if ! grep -q "alpine" /etc/os-release && ! grep -q "debian" /etc/os-release; then
    echo "Please install Homebrew and the Brewfile."
  fi
  brew_prefix=""
fi

{{ if ne .nvimType "default" }}
export NVIM_APPNAME={{ .nvimType }}
{{ end }}
export DOTFILES={{ .chezmoi.sourceDir }}
export DOTFILES_SHELL=$shell
export DOTFILES_BREW_PREFIX=$brew_prefix

# ============================================================================
# Python Development
# ============================================================================
export PIP_REQUIRE_VIRTUALENV=true  # Enforce virtualenv usage (use pip --isolated to bypass)
export PYENV_ROOT="$HOME/.pyenv"    # pyenv installation directory

# ============================================================================
# Package Manager Settings
# ============================================================================
# Nix package manager configuration
export NIXPKGS_ALLOW_UNFREE=1       # Allow installation of unfree/proprietary packages
export NIX_SHOW_WARNINGS=0          # Suppress deprecation warnings and other noise

# Homebrew configuration
export HOMEBREW_NO_ANALYTICS=1      # Disable Homebrew's analytics collection

# ============================================================================
# Editor Configuration
# ============================================================================
export GIT_EDITOR="nvim"            # Default editor for Git operations
export EDITOR="nvim"               # Default system editor

{{ if eq .editor "emacsclient" }}
export GIT_EDITOR="emacsclient -t"
export EDITOR="emacsclient -t"
export VISUAL="emacsclient -c"
{{ end }}

# ============================================================================
# Path and Repository Configuration
# ============================================================================
export PATH="$HOME/.local/bin:$PATH"                              # User binaries
export LOCAL_GIT_REPOS_PATH={{ .gitLocalRepositories | quote  }} # Local Git repositories

{{ if .dockerEnabled }}
add_to_path append "$HOME/.docker/bin"
{{ end }}

add_to_path append "$HOME/.cargo/bin"
add_to_path append "$HOME/go/bin"

# ============================================================================
# PATH Configuration
# ============================================================================
# NOTE: The last prepend appears first in $PATH - order matters!
# Priority (highest to lowest):
add_to_path prepend "$PYENV_ROOT/bin"         # pyenv
add_to_path prepend "$HOME/.local/bin"        # user-installed binaries
add_to_path prepend "$HOME/.config/shell/bin" # personal and custom scripts
add_to_path prepend "$HOME/.config/emacs/bin"      # emacs binaries

# ============================================================================
# Shell Behavior Configuration
# ============================================================================
# Customize word-splitting behavior for better navigation (M-f/M-b)
# By default, zsh considers many characters part of a word (e.g., _ and -).
# This narrows it down for more intuitive word navigation.
export WORDCHARS='*?[]~&;!$%^<>'

# Ensure Nix user profile is in PATH with high priority
add_to_path prepend "/nix/var/nix/profiles/default/bin"
add_to_path prepend "$HOME/.nix-profile/bin"

# Home Manager packages
add_to_path prepend "$HOME/.local/state/nix/profiles/home-manager/home-path/bin"

# ============================================================================
# Platform-Specific Configuration
# ============================================================================
case $(uname) in
Darwin)
  # commands for macOS go here

  ;;

Linux)
  # commands for Linux go here
  add_to_path append "$PATH:/snap/bin"

  # XDG Base Directory Specification
  export XDG_CONFIG_HOME="$HOME/.config"
  export XDG_DATA_HOME="$HOME/.local/share"
  export XDG_STATE_HOME="$HOME/.local/state"
  export XDG_CACHE_HOME="$HOME/.cache"

  ;;

*) ;;
esac
