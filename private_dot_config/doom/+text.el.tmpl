;;; +text.el -*- mode: emacs-lisp; lexical-binding: t; -*-

(use-package! pomm
  :defer t
  :commands (pomm pomm-third-time)
  :config
  (setq pomm-work-period 30
        pomm-long-break-period 25
        pomm-short-break-period 5
        alert-default-style (if IS-MAC 'osx-notifier 'libnotify)
        pomm-audio-enabled t)
  (pomm-mode-line-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org + PARA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! org
  ;; PARA for projects, tasks, files
  (setq org-directory {{ .primary_cloud | quote }})
  
  ;; Scan PARA for org files (for agenda)
  (setq org-agenda-files
        (list (concat {{ .primary_cloud | quote }} "/0-Inbox/")
              (concat {{ .primary_cloud | quote }} "/1-Projects/")
              (concat {{ .primary_cloud | quote }} "/2-Areas/")))
  
  ;; Quick captures go here
  (setq org-default-notes-file (concat {{ .primary_cloud | quote }} "/0-Inbox/inbox.org"))

  ;; Capture templates for PARA
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("n" "Note" entry (file+headline org-default-notes-file "Notes")
           "* %?\n  %i\n  %a")
          ("p" "Project" entry (file (lambda () (concat {{ .primary_cloud | quote }} "/1-Projects/" (read-string "Project name: ") ".org")))
           "* TODO %?\n  %i\n  %a")
          ("a" "Area" entry (file (lambda () (concat {{ .primary_cloud | quote }} "/2-Areas/" (read-string "Area name: ") ".org")))
           "* %?\n  %i\n  %a")
          ("r" "Resource" entry (file (lambda () (concat {{ .primary_cloud | quote }} "/3-Resources/" (read-string "Resource name: ") ".org")))
           "* %?\n  %i\n  %a")))

  ;; TODO keywords
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

  ;; Startup settings
  (setq org-startup-folded 'content)
  (setq org-startup-indented t))

;; ============================================
;; org-roam + PKM/Logseq
;; ============================================

(use-package! org-roam
  :custom
  ;; Point to Logseq's directory
  (org-roam-directory
   (expand-file-name "~/Library/Mobile Documents/iCloud~com~logseq~logseq/Documents/Org"))
  
  ;; Logseq's journal structure
  (org-roam-dailies-directory "journals/")
  
  ;; Capture templates (Logseq compatible)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?" :target
      (file+head "pages/${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)))
  
  :config
  ;; Auto-sync database
  (org-roam-db-autosync-mode))

;; ============================================
;; Keybindings
;; ============================================

(map! :leader
      (:prefix ("P" . "PARA")
       :desc "Find file in PARA" "f" #'(lambda () (interactive)
                                          (let ((default-directory {{ .primary_cloud | quote }}))
                                            (+default/find-file-under-here)))
       :desc "Open PARA" "P" #'(lambda () (interactive) (dirvish {{ .primary_cloud | quote }}))
       :desc "Open inbox" "i" #'(lambda () (interactive) (dirvish (concat {{ .primary_cloud | quote }} "/0-Inbox/")))
       :desc "Open projects" "p" #'(lambda () (interactive) (dirvish (concat {{ .primary_cloud | quote }} "/1-Projects/")))
       :desc "Open areas" "a" #'(lambda () (interactive) (dirvish (concat {{ .primary_cloud | quote }} "/2-Areas/")))
       :desc "Open resources" "r" #'(lambda () (interactive) (dirvish (concat {{ .primary_cloud | quote }} "/3-Resources/")))
       :desc "Open archive" "A" #'(lambda () (interactive) (dirvish (concat {{ .primary_cloud | quote }} "/4-Archive/")))
       :desc "Agenda" "c" #'org-agenda)
      
      ;; Org-roam (PKM/Logseq)
      ;; These are already mapped by Doom to SPC n r
      ;; Just documenting what they do:
      ;; SPC n r f  → Find/create note in Logseq
      ;; SPC n r i  → Insert link to note
      ;; SPC n r g  → Graph view
      ;; SPC n r d d → Today's journal (Logseq)
      )




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MARKDOWN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (setq markdown-fontify-code-blocks-natively t)

;; (remove-hook 'text-mode-hook #'auto-fill-mode)

;; (use-package! edit-indirect :defer t)

;; (add-hook! 'markdown-mode-hook (setq-local format-all-formatters '(("Markdown" prettier))))

;; (after! markdown-mode
;;   (advice-add #'markdown-follow-thing-at-point :around #'doom-set-jump-a))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OTHERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! tldr
  :defer t
  :config
  (setq tldr-directory-path (concat doom-etc-dir "tldr/"))
  (set-popup-rule! "^\\*tldr\\*" :side 'right :select t :quit t)
  )

(use-package! link-hint :defer t)

(use-package! symbol-overlay :defer t)

(after! so-long
  (setq so-long-target-modes (delete 'text-mode so-long-target-modes)))

(use-package! adoc-mode
  :defer t
  :init
  (add-to-list 'auto-mode-alist (cons "\\.adoc\\'" 'adoc-mode)))
