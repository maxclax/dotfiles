;;; +misc.el -*- mode: emacs-lisp; lexical-binding: t; -*-


(use-package consult-todo
  :defer t)

(use-package! screenshot
  :defer t)

;; Set personal ispell dictionary file
(when (and
       (executable-find "aspell")
       (file-exists-p (expand-file-name "~/.aspell.en.pws")))
  (setq ispell-personal-dictionary (expand-file-name "~/.aspell.en.pws")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NAVIGATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(after! evil
  (evil-define-text-object evil-inner-buffer (count &optional beg end type)
    (list (point-min) (point-max)))
  (define-key evil-inner-text-objects-map "g" 'evil-inner-buffer))


(after! evil-snipe
  (setq evil-snipe-scope 'buffer
        evil-snipe-repeat-scope 'buffer)
  (push 'prodigy-mode evil-snipe-disabled-modes))


;; This package provides the g~ operator to transform CamelCase words into snake_case. You can customize the binding.
;; Try using g~io
(use-package! evil-string-inflection :after evil)


(use-package! tmux-pane
  :unless (display-graphic-p)
  :defer t
  :commands (tmux-pane--windmove)
  :hook (after-init . my-tmux-pane-mode)
  :init
  (defvar my-tmux-pane-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-t k")
                  (lambda () (interactive) (tmux-pane--windmove "up"  "-U")))
      (define-key map (kbd "C-t j")
                  (lambda () (interactive) (tmux-pane--windmove "down"  "-D")))
      (define-key map (kbd "C-t h")
                  (lambda () (interactive) (tmux-pane--windmove "left" "-L")))
      (define-key map (kbd "C-t l")
                  (lambda () (interactive) (tmux-pane--windmove "right" "-R")))
      (define-key map (kbd "C-t C-k")
                  (lambda () (interactive) (tmux-pane--windmove "up"  "-U")))
      (define-key map (kbd "C-t C-j")
                  (lambda () (interactive) (tmux-pane--windmove "down"  "-D")))
      (define-key map (kbd "C-t C-h")
                  (lambda () (interactive) (tmux-pane--windmove "left" "-L")))
      (define-key map (kbd "C-t C-l")
                  (lambda () (interactive) (tmux-pane--windmove "right" "-R")))
      map))

  (define-minor-mode my-tmux-pane-mode
    "Seamlessly navigate between tmux pane and emacs window"
    :init-value nil
    :global t
    :keymap 'my-tmux-pane-mode-map))


(use-package! imenu-list
  :defer t
  :config
  (set-popup-rules! '(("^\\*Ilist\\*" :side right :size 40 :select t))))

(add-hook! 'better-jumper-post-jump-hook #'recenter)

(after! nav-flash
  (defun +advice/nav-flash-show (orig-fn &rest args)
    (ignore-errors (apply orig-fn args)))
  (advice-add 'nav-flash-show :around #'+advice/nav-flash-show))

(after! dirvish
  (setq dirvish-attributes
        '(vc-state file-size nerd-icons collapse subtree-state file-time))
  (setq dirvish-quick-access-entries
        `(("h" "~/" "Home")
          ("c" "~/.config" "config")
          ("l" "~/.local" "local")
          ("d" "~/Desktop" "Desktop")
          ("D" "~/Downloads" "Downloads")
          ("I" ,(expand-file-name "~/Library/Mobile Documents/com~apple~CloudDocs/Downloads") "Downloads (iCloud)")

          ("w" ,(expand-file-name {{ .workspace | quote }}) "Workspace")
          ("W" ,(expand-file-name {{ .workspace_extra | quote }}) "Workspace extra")
          ("p" ,(expand-file-name {{ .playground | quote }}) "Playground")
          ("r" ,(expand-file-name {{ .resources | quote }}) "Resources")
          ;; Add cloud storage entries
          ("P" ,(expand-file-name {{ .primary_cloud | quote }}) "Primary Cloud")
          ("S" ,(expand-file-name {{ .secondary_cloud | quote }}) "Secondary Cloud")))

  (setq dirvish-hide-details '(dired dirvish dirvish-side)
        dirvish-hide-cursor '(dired dirvish dirvish-side))

  (when (executable-find "lla")
    (dirvish-define-preview lla (file)
      "Use `lla' to generate directory preview."
      :require ("lla")         ; tell Dirvish to check if we have the executable
      (when (file-directory-p file)     ; we only interest in directories here
        `(shell . ("lla" "-l" "--icons" ,file))))

    (add-to-list 'dirvish-preview-dispatchers 'lla))

  (defun dirvish-copy-file-relative-path (&optional multi-line)
    "Copy filepath of marked files.
    If MULTI-LINE, make every path occupy a new line."
    (interactive "P")
    (let* ((files (mapcar (lambda (file)
                            (file-relative-name (file-local-name file)))
                          (dired-get-marked-files)))
           (names (mapconcat #'concat files (if multi-line "\n" " "))))
      (dirvish--kill-and-echo (if multi-line (concat "\n" names) names)))))

(after! dash-docs
  (setq dash-docs-use-workaround-for-emacs-bug nil)
  (setq dash-docs-browser-func 'browse-url-generic))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TRANSLATE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! gt
  :defer t
  :config
  (setq gt-langs '(en uk))
  (setq gt-default-translator
        (gt-translator
         :taker   (gt-taker :text 'buffer :pick 'paragraph) ; config the Taker
         :engines (list (gt-bing-engine) (gt-google-engine)) ; specify the Engines
         :render  (gt-buffer-render)))                       ; config the Render
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LOG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package! keycast
  :config
  ;; Enable keycast-header-line-mode by default
  (keycast-header-line-mode 1)
  ;; Optional: customize keycast appearance
  (setq keycast-header-line-format "%2s%k%c%R")
  ;; Show in header line instead of mode line for cleaner look
  (setq keycast-insert-after 'mode-line-buffer-identification))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SSH
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! ssh-deploy
  (setq ssh-deploy-automatically-detect-remote-changes 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq sql-postgres-program "pgcli")  ; Use pgcli instead of psql
(setq sql-postgres-options
      '("-h" "localhost" "-p" "5432" "-U" "postgres" "-d" "postgres"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ERC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(setq erc-prompt (lambda () (concat "[" (buffer-name) "]"))
      erc-server "irc.libera.chat"
      ;; erc-nick ""
      ;; erc-user-full-name ""
      erc-track-shorten-start 24
      erc-autojoin-channels-alist '(("irc.libera.chat" "#archlinux" "#linux" "#emacs"))
      erc-kill-buffer-on-part t
      erc-fill-column 100
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20
      ;; erc-auto-query 'bury
      )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AI
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(set-evil-initial-state!
  '(comint-mode)
  'insert)

(add-hook! 'comint-mode-hook #'visual-line-mode)

(use-package! monet
  :defer t)

(use-package! claude-code
  :after monet
  :bind-keymap ("C-c c" . claude-code-command-map)
  :bind (:repeat-map my-claude-code-map
         ("M" . claude-code-cycle-mode))
  :config
  (add-hook 'claude-code-process-environment-functions
            #'monet-start-server-function)
  (monet-mode 1)
  (claude-code-mode 1))

(after! claude-code
  (setq claude-code-terminal-backend 'vterm))

(use-package! claude-code-ide
  :config
  (claude-code-ide-emacs-tools-setup)) ; Optionally enable Emacs MCP tools


(use-package! aidermacs
  :config
  (setq aidermacs-auto-accept-architect nil)
  (setq aidermacs-backend 'vterm)
  :custom
  (aidermacs-default-chat-mode 'architect)
  (aidermacs-default-model "sonnet"))

(use-package! aider
  :config
  ;; For latest claude sonnet model
  (setq aider-args '("--model" "sonnet" "--no-auto-accept-architect" "--no-auto-commits"))
  (aider-magit-setup-transients) ;; add aider magit function to magit menu
  ;; auto revert buffer
  (global-auto-revert-mode 1)
  (auto-revert-mode 1)
  (require 'aider-doom))

(use-package! gptel
  :config
  (require 'gptel-integrations)
  (require 'gptel-org)
  (setq gptel-model 'gpt-4.1 ;; gpt-4.5, gemini-2.5-pro, claude-sonnet-4, claude-4-opus
        gptel-default-mode 'org-mode
        gptel-use-curl t
        gptel-use-tools t
        gptel-confirm-tool-calls 'always
        gptel-include-tool-results 'auto
        gptel--system-message (concat gptel--system-message " Make sure to use English language.")
        gptel-backend (gptel-make-gh-copilot "gptel.Copilot" :stream t))

  (setq gptel-gh-copilot-model "claude-sonnet-4")
  (setq gptel-anthropic-model "claude-sonnet-4-20250514")
  (setq gptel-gemini-model "gemini-2.0-flash-exp")
  (setq gptel-deepseek-model "deepseek-pro")

  (gptel-make-deepseek "gptel.DeepSeek" :stream t)
  (gptel-make-anthropic "gptel.Claude" :stream t)
  (gptel-make-gemini "gptel.Gemini" :stream t))

;; Simple AI commit message generator
(defun +my/smart-commit ()
  "Generate commit message using AI."
  (interactive)
  (let ((diff (shell-command-to-string "git diff --cached")))
    (if (string-empty-p (string-trim diff))
        (message "No staged changes found")
      (gptel-request 
       (format "Generate a short git commit message for:\n%s" diff)
       :callback (lambda (response info)
                   (when response
                     (kill-new (string-trim response))
                     (message "Commit message: %s" (string-trim response))))))))


(use-package! mcp
  :after gptel
  :custom
  (mcp-hub-servers
   `(("git" . (:command "uvx" :args ("mcp-server-git")))
     ("fetch" . (:command "uvx" :args ("mcp-server-fetch")))
     ("filesystem" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-filesystem", (getenv "HOME"), "{{ .workspace }}", "{{ .workspace_extra }}")))

     ("nixos" . (:command "uvx" :args ("mcp-nixos")))
     ("airbnb" . (:command "npx" :args ("-y" "@openbnb/mcp-server-airbnb")))
     ("duckduckgo" . (:command "uvx" :args ("duckduckgo-mcp-server")))
     ("sequential-thinking" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-sequential-thinking")))
     ("context7" . (:command "npx" :args ("-y" "@upstash/context7-mcp") :env (:DEFAULT_MINIMUM_TOKENS "6000")))
     ("postgres" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-postgres" "postgresql://127.0.0.1/postgres?user=postgres&password=postgres")))
     ;; ("everything" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-everything")))
     )
   )

  :config (require 'mcp-hub))


(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)
              ("M-n" . 'copilot-next-completion)
              ("M-p" . 'copilot-previous-completion))
  :config
  (setq copilot-max-char 500000)
  (setq copilot-idle-delay 1)

  ;; Ensure company-box is used to avoid overlay conflicts
  (with-eval-after-load 'company
    (delq 'company-preview-if-just-one-frontend company-frontends))

  (add-to-list 'copilot-indentation-alist '(web-mode 2))
  (add-to-list 'copilot-indentation-alist '(html-mode 2))
  (add-to-list 'copilot-indentation-alist '(markdown-mode 2))
  (add-to-list 'copilot-indentation-alist '(prog-mode 2))
  (add-to-list 'copilot-indentation-alist '(org-mode 2))
  (add-to-list 'copilot-indentation-alist '(text-mode 2))
  (add-to-list 'copilot-indentation-alist '(closure-mode 2))
  (add-to-list 'copilot-indentation-alist '(emacs-lisp-mode 2)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; COMPLETION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! corfu
  (setq +corfu-want-ret-to-confirm "both")
  )

(when (modulep! :completion vertico)
  (setq vertico-posframe-border-width 3)
  (setq vertico-posframe-poshandler #'posframe-poshandler-frame-bottom-center)

  ;; Fix jump issue for vertico, https://github.com/hlissner/doom-emacs/issues/5386
  (dolist (func '(+default/search-project))
    (advice-add func :around #'doom-set-jump-a)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PROJECTILE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! projectile
  (setq compilation-read-command nil)   ; no prompt in projectile-compile-project
  ;; set projectile-known-projects after magit
  (after! magit
    (update-projectile-known-projects))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PRODIGY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Create a module for prodigy
(use-package prodigy
  :config

  (prodigy-define-tag
    :name 'jekyll
    :env '(("LANG" "en_US.UTF-8")
           ("LC_ALL" "en_US.UTF-8")))

  ;; Podman Machine Start (action service)
  (prodigy-define-service
    :name "🚀 Start Podman Machine"
    :command "podman"
    :args '("machine" "start")
    :tags '(podman infra action)
    :port nil
    :init (lambda ()
            (message "Starting podman machine..."))
    :kill-process-buffer-on-stop t)

  ;; Podman Machine Stop (action service)
  (prodigy-define-service
    :name "🛑 Stop Podman Machine"
    :command "podman"
    :args '("machine" "stop")
    :tags '(podman infra action)
    :port nil
    :init (lambda ()
            (message "Stopping podman machine..."))
    :kill-process-buffer-on-stop t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TERM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(after! eshell
  ;; eshell-mode imenu index
  (add-hook! 'eshell-mode-hook (setq-local imenu-generic-expression '(("Prompt" " λ \\(.*\\)" 1))))

  (defun eshell/l (&rest args) (eshell/ls "-l" args))
  (defun eshell/e (file) (find-file file))
  (defun eshell/md (dir) (eshell/mkdir dir) (eshell/cd dir))
  (defun eshell/ft (&optional arg) (treemacs arg))

  (defun eshell/up (&optional pattern)
    (let ((p (locate-dominating-file
              (f-parent default-directory)
              (lambda (p)
                (if pattern
                    (string-match-p pattern (f-base p))
                  t)))
             ))
      (eshell/pushd p)))
  )


(after! term
  ;; term-mode imenu index
  (add-hook! 'term-mode-hook (setq-local imenu-generic-expression '(("Prompt" "➜\\(.*\\)" 1)))))
