;;; +ui.el -*- mode: emacs-lisp; lexical-binding: t; -*-

;; Set fallback theme
(setq fancy-splash-image (concat doom-private-dir "assets/GNUEmacs.png"))


(use-package! circadian
  :config
  (setq circadian-themes '(("5:00" . doom-one-light)
                           ("21:00" . doom-one)))

  ;; Determine the correct initial theme based on current time
  (let* ((hour-now (string-to-number (format-time-string "%H")))
         (minute-now (string-to-number (format-time-string "%M")))
         (time-now (+ (* hour-now 60) minute-now))
         (light-start (+ (* 5 60) 0))   ;; 5:00 in minutes
         (dark-start (+ (* 18 60) 30))) ;; 18:30 in minutes

    ;; Set the initial theme based on current time
    (setq doom-theme
          (if (and (>= time-now light-start)
                   (< time-now dark-start))
              'doom-one-light ;; During day (5:00-18:30)
            'doom-one)))      ;; During night

  ;; Setup circadian for automatic switching
  (circadian-setup))

(beacon-mode 1)

(setq display-line-numbers-type t)
;; (setq display-line-numbers-type 'relative)

;; Set the default font
(set-face-attribute 'default nil
                    :font "Berkeley Mono Variable-18"
                    :weight 'normal
                    :width 'normal)

;; ====================== Fix for emacsclient ======================
;; Reapply GUI settings for new frames (emacsclient)

(add-hook 'server-after-make-frame-hook
          (lambda ()
            (when (and (boundp 'circadian--current-theme)
                       circadian--current-theme)
              (load-theme circadian--current-theme t))
            (set-face-attribute 'default nil
                               :font "Berkeley Mono Variable-18"
                               :weight 'normal
                               :width 'normal)))

;; ====================== End Fix for emacsclient ======================


;; (set-popup-rules! '(("^\\*helpful" :size 0.35 :modeline nil)
;;                     ("^\\*Ibuffer\\*$" :size 0.35 :modeline nil)
;;                     ("^\\*info.*" :size 80 :side right :modeline nil)
;;                     ("^\\*Man.*" :size 80 :side right :modeline nil)
;;                     ("^\\*keycast.*" :size 50 :side right :modeline nil)
;;                     ("^\\*Customize" :actions display-buffer :modeline nil)
;;                     ("^\\*edit-indirect" :size 0.6 :modeline nil)
;;                     ("^\\*YASnippet Tables\\*$" :size 0.35 :modeline nil)
;;                     ("^\\*grep\\*$" :size 0.35 :modeline nil)
;;                     ("^\\*pytest\\*" :size 0.35 :modeline nil)
;;                     ;; ("^\\*aider.*$" :size 0.35 :side right :modeline nil)
;;                     ("^\\*Chat" :size 0.35 :side right :modeline nil)
;;                     ;; ("^\\*gptel.*" :size 0.35 :side right :modeline nil)
;;                     ("\\*.*server log\\*$" :side top :size 0.20 :select nil :modeline nil)
;;                     ((lambda (buf _) (with-current-buffer buf (eq major-mode 'forge-topic-mode))) :size 0.35 :modeline nil)
;;                     ))

;; (setq doom-modeline-height 30     ;; sets modeline height
;;       doom-modeline-bar-width 5   ;; sets right bar width
;;       doom-modeline-persp-name t  ;; adds perspective name to modeline
;;       doom-modeline-persp-icon t) ;; adds folder icon next to persp name

;; (after! ibuffer
;;   (setq-hook! 'ibuffer-hook ibuffer-formats
;;               '((mark modified read-only locked " "
;;                  (name 50 18 :left :elide)
;;                  " "
;;                  (size 9 -1 :right)
;;                  " "
;;                  (mode 16 16 :left :elide)
;;                  " " filename-and-process)
;;                 (mark " "
;;                       (name 16 -1)
;;                       " " filename))))

(use-package! all-the-icons-ibuffer
  :after ibuffer
  :init (all-the-icons-ibuffer-mode 1)
  )

(defface breakpoint-enabled '((t)) "Breakpoint face.")


(add-hook! 'process-menu-mode-hook
  (setq-local tabulated-list-format [("Process" 30 t)
                                     ("PID"      7 t)
                                     ("Status"   7 t)
                                     ("Buffer"  15 t)
                                     ("TTY"     12 t)
                                     ("Command"  0 t)]))

(after! centered-window
  (setq cwm-centered-window-width 160))

;; ;; Auto-run pomm after Emacs starts
;; (add-hook 'emacs-startup-hook
;;           (lambda ()
;;             (run-with-timer 2 nil #'pomm)))

;; Enable rainbow-mode globally
(use-package! rainbow-mode
  :config
  (add-hook 'after-init-hook 'rainbow-mode))

