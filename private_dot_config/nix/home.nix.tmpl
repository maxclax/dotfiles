# -*- mode: nix; -*-
{ config, pkgs, ... }:

{
  # Home Manager needs a bit of information about you and the paths it should manage
  home.username = "{{ .chezmoi.username }}";
  home.homeDirectory = "{{ .chezmoi.homeDir }}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  home.stateVersion = "25.05";

  # The home.packages option allows you to install Nix packages into your environment
  home.packages = with pkgs; [
    # Core System & CLI Tools (installed on all systems)
    age                    # Encryption with GPG keys
    atuin                  # Magical shell history
    bandwhich              # Network utilization display
    bat                    # Cat clone with syntax highlighting
    btop                   # Resource monitor
    chezmoi                # Manage dotfiles across machines
    curl                   # Transfer data with URLs
    direnv                 # Environment switcher for shell
    duf                    # Disk Usage/Free Utility
    eza                    # Modern replacement for 'ls'
    fd                     # Simple, fast, user-friendly 'find'
    fzf                    # Command-line fuzzy finder
    gh                     # GitHub command-line tool
    git                    # Distributed version control
    htop                   # Interactive process viewer
    lazygit                # Simple terminal UI for Git
    lsof                   # List open files
    ncdu                   # Disk usage analyzer
    neofetch               # System information tool
    ripgrep                # Recursively searches directories
    shellcheck             # Shell script static analysis
    starship               # Cross-shell prompt
    tmux                   # Terminal multiplexer
    tree                   # Display directory tree
    wget                   # Retrieve files from web
    zoxide                 # A smarter cd command
    zsh                    # Z shell


    # ----------------------------------------------------------------------------
    # Development machines
    # ----------------------------------------------------------------------------
{{- if eq .chezmoi.os "darwin" }}
    # AI Development Tools
    aider-chat
    claude-code
    codex
    gemini-cli
    ollama                 # Run large language models

    # Advanced Development & Programming
    _1password-cli         # 1Password CLI
    borgbackup             # Deduplicating backup program
    borgmatic              # BorgBackup wrapper
    chafa                  # Image to terminal converter
    cmake                  # Cross-platform build system
    cmatrix                # Matrix digital rain effect
    coreutils-prefixed     # GNU core utilities with 'g' prefix
    cowsay                 # ASCII pictures of a cow with a message - TEST PACKAGE
    ctop                   # Top-like interface for containers
    discount               # Markdown C implementation
    fontconfig             # Library for configuring fonts
    gcc                    # GNU Compiler Collection
    glances                # System monitoring tool
    gnumake                # GNU make utility
    graphviz               # Graph visualization software
    gtrash                 # Trash can for command-line
    hcloud                 # Hetzner Cloud CLI
    hey                    # HTTP load generator
    hugo                   # Fast static site generator
    iftop                  # Display bandwidth usage
    imagemagick            # Convert, edit, compose images
    k6                     # Modern load testing tool
    lazydocker             # Simple terminal UI for Docker
    luarocks               # Package manager for Lua
    neovim                 # Hyperextensible Vim-based editor
    nixfmt                 # Nix code formatter
    nmap                   # Network discovery and security
    pay-respects           # Pay respects
    pnpm                   # Fast, efficient package manager
    ranger                 # Console file manager
    ruff                   # Extremely fast Python linter
    sl                     # Steam locomotive animation
    slides                 # Terminal presentation tool
    speedtest-cli          # Test internet bandwidth
    stylelint              # Linter for CSS
    tldr                   # Collaborative cheatsheets
    tmuxinator             # Manage complex tmux sessions
    tree-sitter            # Parser generator tool
    trufflehog             # Find leaked credentials
    uv                     # Fast Python package installer
    vips                   # Fast image processing library
    watch                  # Execute a program periodically

    # Kubernetes & Cloud Development
    k9s                    # Kubernetes CLI To Manage Clusters
    kind                   # Kubernetes IN Docker
    kubectl                # Kubernetes command-line tool
    kubectx                # Switch between k8s contexts
    kubernetes-helm        # Kubernetes package manager
    linkerd                # Service mesh for Kubernetes
    popeye                 # Kubernetes cluster sanitizer
    stern                  # Multi pod log tailing
    terraform              # Infrastructure as Code

    # Language-specific packages for development
     
    # Python
    pipenv                 # Python dependency management
    python3                # The Python programming language
    python3Packages.editorconfig # EditorConfig for Python
    python3Packages.isort  # Sort Python imports
    python3Packages.ptpython # Advanced Python REPL
    python3Packages.pytest # Python testing framework

    # Node.js
    nodePackages.cspell    # Spell checker for code
    nodePackages.js-beautify # Beautifier for JavaScript
    nodejs                 # JavaScript runtime

    # Emacs
    emacsPackages.editorconfig # EditorConfig for Emacs

    # Development utilities
    aspell                 # Spell checker
    pgcli                  # Postgres CLI with autocompletion
    
    # Conditional Packages
{{- if .podmanEnabled }}
    podman                 # Daemonless container engine
    podman-compose         # Run docker-compose.yml
{{- end }}
{{- if .dockerEnabled }}
    docker                 # Containerization platform
    docker-compose         # Run multi-container applications
{{- end }}

    # ----------------------------------------------------------------------------
    # macOS-specific packages
    # ----------------------------------------------------------------------------
    dockutil               # Manage macOS Dock items
    jankyborders           # Borders for macOS windows
    mas                    # Mac App Store CLI
    pngpaste               # Paste PNG into file
{{- end }}

    # ----------------------------------------------------------------------------
    # Server/Headless machines (rp-, debian, ubuntu, centos)
    # ----------------------------------------------------------------------------
{{- if eq .chezmoi.os "linux" }}
    asciinema
    atop
    bash
    build-essential
    ca-certificates
    cmake
    curl
    fd-find
    gcc
    git-absorb
    git-lfs
    gnupg
    gpg
    jq
    libfuse2
    lsb-release
    make
    python3-pip
	inetutils-telnet
	inotify-tools
	openssh-server
	openvpn
    trash-cli
    units
    zsh-autosuggestions
    zsh-syntax-highlighting

    fonts-firacode
    fonts-jetbrains-mono

    kubectl                # Kubernetes command-line tool
    kubectx                # Switch between k8s contexts
    kubernetes-helm        # Kubernetes package manager
{{- end }}

    # Conditional Packages
{{- if .goEnabled }}
    go                     # The Go programming language
    gomodifytags           # Go tool to modify struct tags
    gotests                # Go test generator
    gore                   # Go REPL
{{- end }}
{{- if .rustEnabled }}
    rustc                  # The Rust compiler
    rustup                 # Rust toolchain installer
{{- end }}

  ];

  # ----------------------------------------------------------------------------
  # Program Configurations
  # ----------------------------------------------------------------------------

  # Zsh Configuration with improvements
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    autosuggestion.enable = true;
    syntaxHighlighting.enable = true;

    # History configuration
    history = {
      size = 10000;
      save = 10000;
      share = true;
      ignoreDups = true;
      ignoreSpace = true;
      expireDuplicatesFirst = true;
    };

    # Better completion
    completionInit = "autoload -Uz compinit && compinit -C";

    oh-my-zsh = {
      enable = true;
      theme = "robbyrussell";
      plugins = [
        "brew"
        "git"
        "podman"
        "poetry"
        "kubectl"
        "kubectx"
        "chezmoi"
        "colored-man-pages"  # Colorized man pages
        "command-not-found"  # Suggests packages when command not found
        "sudo"              # Double ESC to add sudo
        "history"           # Better history commands
{{- if eq .chezmoi.os "darwin" }}
        "macos"             # macOS specific commands
{{- end }}
      ];
    };

    shellAliases = {
      reload-zsh = "source ~/.zshrc";
      edit-zsh = "nvim ~/.zshrc";
    };

    initContent = ''
      # completion using arrow keys (based on history)
      bindkey '^[[A' history-search-backward
      bindkey '^[[B' history-search-forward

      # Source file if it exists and have a size greater than zero
      [[ -s ~/.config/shell/exports.sh ]] && source ~/.config/shell/exports.sh
      [[ -s ~/.config/shell/aliases.sh ]] && source ~/.config/shell/aliases.sh
      [[ -s ~/.config/shell/sourcing.sh ]] && source ~/.config/shell/sourcing.sh

      # Source additional configurations from .zshrc.local
      if [ -f ~/.zshrc.local ]; then
        source ~/.zshrc.local
      fi
    '';
  };

  # Bash Configuration
  programs.bash = {
    enable = true;

    initExtra = ''
      # Source file if it exists and have a size greater than zero
      [[ -s ~/.config/shell/exports.sh ]] && source ~/.config/shell/exports.sh
      [[ -s ~/.config/shell/aliases.sh ]] && source ~/.config/shell/aliases.sh
      [[ -s ~/.config/shell/sourcing.sh ]] && source ~/.config/shell/sourcing.sh

      # neofetch
    '';
  };

  # Vim Configuration with plugins
  programs.vim = {
    enable = true;

    plugins = with pkgs.vimPlugins; [
      # Core plugins
      vim-fugitive              # Git integration
      vim-vinegar               # - to open netrw
      vim-airline               # powerline
      easymotion                # better move commands
      vim-tmux-navigator        # better tmux integration
      supertab                  # more powerful <tab>
      goyo-vim                  # distraction-free writing
      vim-dirvish               # less buggy netrw alternative
      nerdtree                  # file explorer
      typescript-vim            # typescript syntax
      ack-vim                   # ack integration
      vim-mundo                 # visualize the undo tree
      tcomment_vim              # commenting helpers
      vim-abolish               # change case on the fly
      vim-repeat                # repeat everything
      vim-surround              # better surround commands
      vim-unimpaired            # pairs of helpful commands
      vimwiki                   # personal wiki
      ale                       # async syntax checker
      ctrlp-vim                 # Ctrl+p to fuzzy search
      fzf-vim                   # fzf integration

      # Color schemes
      papercolor-theme          # PaperColor theme
      vim-colors-solarized      # Solarized theme
      vim-colorschemes          # Collection of color schemes
    ];

    extraConfig = ''
      " -*- mode: vimrc -*-"

      " Load the rest of your configuration
      source $HOME/.config/vim/settings/configs.vim
      source $HOME/.config/vim/settings/functions.vim
      source $HOME/.config/vim/settings/mappings.vim
      source $HOME/.config/vim/settings/commands.vim

      " Plugin configurations (from your plugins.vim)
      let g:plug_timeout = 300

      " nerdtree
      let NERDTreeIgnore=['\.pyc$', '\~$']
      let NERDTreeShowBookmarks=1
      let NERDTreeHijackNetrw=0
      let g:NERDTreeFileLines = 1

      " CtrlP
      let g:ctrlp_working_path_mode = 'ra'

      " fzf
      let $FZF_DEFAULT_COMMAND = 'list_all_files'
      nnoremap <c-p> :FZF<cr>
      set grepprg=rg\ --vimgrep\ --smart-case\ --follow

      " vim-test
      let test#strategy = "dispatch"

      " ack -> ag
      if executable('ag')
        let g:ackprg = 'ag --vimgrep'
      endif

      " :Far -> ag
      let g:far#source = 'ag'

      " Mundo
      let g:gundo_preview_bottom = 1
      nnoremap <F5> :MundoToggle<cr>
    '';
  };

  # Direnv Configuration
  programs.direnv = {
    enable = true;
    nix-direnv.enable = true;

    config = {
      global = {
        hide_env_diff = true;
        load_dotenv = true;
      };
    };
  };

{{- if eq .chezmoi.os "darwin" }}
  # Alacritty Configuration
  programs.alacritty = {
    enable = true;

    settings = {
      general = {
        live_config_reload = true;
        import = [
          "~/.config/alacritty/themes/themes/tokyo-night.toml"
        ];
      };

      env = {
        TERM = "xterm-256color";
      };

      window = {
        decorations = "buttonless";
        dynamic_padding = false;
        opacity = 0.9;
        padding = {
          x = 10;
          y = 10;
        };
      };

{{- if .fontsEnabled }}
      font = {
        size = 20.0;
        normal = {
          family = "Berkeley Mono";
          style = "Regular";
        };
        bold = {
          family = "Berkeley Mono";
          style = "Heavy";
        };
        bold_italic = {
          family = "Berkeley Mono";
          style = "Heavy Italic";
        };
        italic = {
          family = "Berkeley Mono";
          style = "Medium Italic";
        };
      };
{{- end }}

      keyboard.bindings = [
        {
          key = "Return";
          mods = "Shift";
          chars = "\\u001b\\r";
        }
      ];
    };
  };
{{- end }}

  # Atuin Configuration
  programs.atuin = {
    enable = true;

    settings = {
      # Main settings
      auto_sync = true;
      sync_frequency = "5m";
      search_mode = "fuzzy";
      filter_mode = "global";
      enter_accept = false;
      show_preview = true;
      style = "compact";
      inline_height = 20;

      # Better defaults
      update_check = false;
      secrets_filter = true;
      workspaces = true;

      # History filter (with chezmoi template)
      history_filter = [
        "^cd {{ .workspace_extra }}/www/.*"
        ".*{{ .workspace_extra }}/www/.*"
        "^secret-cmd"
        "^innocuous-cmd .*--secret=.+"
        # Common noise commands
        "^ls$"
        "^pwd$"
        "^exit$"
        "^clear$"
        "^history$"
      ];

      # Stats configuration
      stats = {
        common_subcommands = [
          "apt"
          "cargo"
          "chezmoi"
          "composer"
          "dnf"
          "docker"
          "git"
          "go"
          "home-manager"
          "ip"
          "kubectl"
          "nix"
          "nix-env"
          "nmcli"
          "npm"
          "pecl"
          "pnpm"
          "podman"
          "port"
          "sudo"
          "systemctl"
          "tmux"
          "yarn"
        ];

        # Ignore simple navigation commands from stats
        ignored_commands = [
          "cd"
          "ls"
          "pwd"
          "exit"
          "clear"
        ];
      };

      # Sync configuration
      sync = {
        records = true;
      };

      # Preview configuration
      preview = {
        strategy = "auto";
      };

      # Daemon configuration for better performance
      daemon = {
        enabled = false;  # Set to true if you want background sync
        sync_frequency = 300;
      };
    };
  };

{{- if eq .chezmoi.os "darwin" }}
  # Ranger Configuration (file manager)
  programs.ranger = {
    enable = true;

    settings = {
      # Display settings
      show_hidden = true;
      preview_files = true;
      preview_directories = true;
      collapse_preview = false;
      draw_borders = "both";

      # UI improvements
      column_ratios = "1,3,4";
      hidden_filter = "^\\.|\\.(?:pyc|pyo|bak|swp)$|^lost\\+found$|^__(pycache)__$";
      show_cursor = false;
      wrap_scroll = true;

      # Performance
      preview_max_size = 0;
      use_preview_script = true;

      # Behavior
      automatically_count_files = true;
      open_all_images = true;
      vcs_aware = true;
      update_title = false;
      shorten_title = 3;

      # Sorting
      sort = "natural";
      sort_case_insensitive = true;
      sort_directories_first = true;
      sort_unicode = false;
    };

    extraConfig = ''
      # Custom aliases
      alias e    edit
      alias q    quit
      alias q!   quit!
      alias qa   quitall
      alias qa!  quitall!
      alias qall quitall
      alias setl setlocal
      alias filter     scout -prts
      alias find       scout -aets
      alias mark       scout -mr
      alias unmark     scout -Mr
      alias search     scout -rs
      alias search_inc scout -rts
      alias travel     scout -aefklst

      # Custom commands
      map DD shell mv %s ~/.Trash
      map dT shell trash-put %s
      map <C-f> fzf_select
      map <C-g> fzf_locate
      map bg shell cp %s ~/Desktop
      map mkd console mkdir%space
      map sc shell du -sh %s
      map V shell code %s
      map vs shell code -r %s
      map o shell open %s

      # Better navigation
      map gh cd ~
      map gd cd ~/Downloads
      map gD cd ~/Desktop
      map gc cd ~/.config
      map gw cd {{ .workspace }}
      map ge cd {{ .workspace_extra }}
      map gr cd {{ .resources }}
      map gp cd {{ .playground }}

      # Image preview for common formats
      map i display_file

      # Git integration
      map gA shell git add %s
      map gC shell git commit
      map gS shell git status
      map gP shell git push
      map gL shell git log --oneline
    '';

    rifle = [
      # Text files
      { condition = "mime ^text, label editor"; command = "nvim -- \"$@\""; }
      { condition = "mime ^text, label pager"; command = "bat -- \"$@\""; }

      # Code files
      { condition = "ext py"; command = "nvim -- \"$@\""; }
      { condition = "ext js|ts|jsx|tsx|json|yaml|yml|toml"; command = "nvim -- \"$@\""; }
      { condition = "ext nix|conf|config|cfg"; command = "nvim -- \"$@\""; }

      # Documents
      { condition = "ext pdf"; command = "open -- \"$@\""; }
      { condition = "ext docx?|xlsx?|pptx?"; command = "open -- \"$@\""; }

      # Media
      { condition = "mime ^image"; command = "open -- \"$@\""; }
      { condition = "mime ^video"; command = "open -- \"$@\""; }
      { condition = "mime ^audio"; command = "open -- \"$@\""; }

      # Archives
      { condition = "ext zip|tar|gz|bz2|xz"; command = "aunpack -- \"$@\""; }

      # Directories
      { condition = "directory"; command = "ranger -- \"$@\""; }
    ];
  };
{{- end }}

  # Starship Configuration
  programs.starship = {
    enable = true;

    settings = {
      add_newline = false;
      format = "$directory$character";
      right_format = "$all";
      command_timeout = 5000;
      palette = "gruvbox_dark";

      # Directory substitutions with chezmoi variables
      directory.substitutions = {
        "{{ .workspace }}" = "workspace";
        "{{ .workspace_extra }}" = "workspace_extra";
        "{{ .resources }}" = "resources";
        "{{ .playground }}" = "playground";
      };

      # Username configuration
      username = {
        style_user = "bg:color_orange fg:color_fg0";
        style_root = "bg:color_orange fg:color_fg0";
        format = "[](color_orange)$user ($style) ]";
        disabled = true;
        show_always = true;
        aliases = { "a" = "b"; };
      };

      # Time configuration
      time = {
        disabled = false;
        style = "bg:color_bg1";
        format = "[[  $time ](fg:color_fg0 bg:color_bg1)]($style)";
        time_format = "%T";
        utc_time_offset = "+2";
      };

      # Cloud providers
      gcloud.disabled = true;

      aws = {
        format = "[$symbol(profile: \"$profile\" )(\\(region: $region\\) )]($style)";
        disabled = true;
        style = "bold blue";
        symbol = " ";
      };

      # Git configuration
      git_branch = {
        format = "on [$symbol$branch(:$remote_branch)]($style)";
      };

      git_status = {
        format = "([\\[$all_status$ahead_behind\\]]($style) ) ";
        untracked = "?$\{count}";
        ahead = "⇡$\{count}";
        staged = "[++\\($count\\)](green)";
        modified = "!$\{count}";
      };

      # Language and tool configurations
      golang = {
        format = "[ ](bold cyan)";
      };

      kubernetes = {
        symbol = "☸ ";
        disabled = false;
        format = "[$symbol$context( \\($namespace\\))]($style) ";
      };

      docker_context.disabled = true;

      # Gruvbox Dark color palette
      palettes.gruvbox_dark = {
        color_fg0 = "#fbf1c7";
        color_bg1 = "#3c3836";
        color_bg3 = "#665c54";
        color_blue = "#458588";
        color_aqua = "#689d6a";
        color_green = "#98971a";
        color_orange = "#d65d0e";
        color_purple = "#b16286";
        color_red = "#cc241d";
        color_yellow = "#d79921";
      };
    };
  };

  # Let Home Manager install and manage itself
  programs.home-manager.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;
}
