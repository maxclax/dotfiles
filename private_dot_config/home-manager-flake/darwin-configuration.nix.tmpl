# -*- mode: nix; -*-
{ config, pkgs, lib, ... }:

{
  # Basic system configuration
  system.stateVersion = 5;

  # Enable nix experimental features
  nix.settings.experimental-features = "nix-command flakes";

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # Basic system packages (minimal for now)
  environment.systemPackages = with pkgs; [
    vim       # Text editor

    # Gui
    alacritty # GPU-accelerated terminal emulator
    aerospace # Lightweight window manager for macOS
  ];

  # User configuration
  users.users."{{ .chezmoi.username }}" = {
    name = "{{ .chezmoi.username }}";
    home = "{{ .chezmoi.homeDir }}";
  };

  # Set primary user for Homebrew and user preferences
  system.primaryUser = "{{ .chezmoi.username }}";

  # LaunchDaemons for system services
  # (espanso moved to Home Manager as user agent)

  # System activation commands to restart processes after configuration changes
  system.activationScripts.extraActivation.text = ''
    # Create iCloud symlink for cross-platform access
    echo "Setting up iCloud symlink..."

    ICLOUD_SOURCE="{{ .chezmoi.homeDir }}/Library/Mobile Documents/com~apple~CloudDocs"
    ICLOUD_SYMLINK="{{ .chezmoi.homeDir }}/icloud"

    if [[ -d "$ICLOUD_SOURCE" && ! -L "$ICLOUD_SYMLINK" ]]; then
      if [[ ! -e "$ICLOUD_SYMLINK" ]]; then
        echo "Creating iCloud symlink: $ICLOUD_SYMLINK -> $ICLOUD_SOURCE"
        sudo -u "{{ .chezmoi.username }}" ln -s "$ICLOUD_SOURCE" "$ICLOUD_SYMLINK"
      else
        echo "Warning: $ICLOUD_SYMLINK exists but is not a symlink"
      fi
    elif [[ -L "$ICLOUD_SYMLINK" ]]; then
      echo "iCloud symlink already exists"
    else
      echo "iCloud Drive not found at $ICLOUD_SOURCE"
    fi

{{- if .primary_cloud }}
    # Create primary cloud symlink
    PRIMARY_CLOUD_SOURCE="{{ .primary_cloud }}"
    PRIMARY_CLOUD_SYMLINK="{{ .chezmoi.homeDir }}/$(basename "{{ .primary_cloud }}")"

    if [[ -d "$PRIMARY_CLOUD_SOURCE" && ! -L "$PRIMARY_CLOUD_SYMLINK" ]]; then
      if [[ ! -e "$PRIMARY_CLOUD_SYMLINK" ]]; then
        echo "Creating primary cloud symlink: $PRIMARY_CLOUD_SYMLINK -> $PRIMARY_CLOUD_SOURCE"
        sudo -u "{{ .chezmoi.username }}" ln -s "$PRIMARY_CLOUD_SOURCE" "$PRIMARY_CLOUD_SYMLINK"
      else
        echo "Warning: $PRIMARY_CLOUD_SYMLINK exists but is not a symlink"
      fi
    elif [[ -L "$PRIMARY_CLOUD_SYMLINK" ]]; then
      echo "Primary cloud symlink already exists"
    else
      echo "Primary cloud not found at $PRIMARY_CLOUD_SOURCE"
    fi
{{- end }}

{{- if .secondary_cloud }}
    # Create secondary cloud symlink
    SECONDARY_CLOUD_SOURCE="{{ .secondary_cloud }}"
    SECONDARY_CLOUD_SYMLINK="{{ .chezmoi.homeDir }}/$(basename "{{ .secondary_cloud }}")"

    if [[ -d "$SECONDARY_CLOUD_SOURCE" && ! -L "$SECONDARY_CLOUD_SYMLINK" ]]; then
      if [[ ! -e "$SECONDARY_CLOUD_SYMLINK" ]]; then
        echo "Creating secondary cloud symlink: $SECONDARY_CLOUD_SYMLINK -> $SECONDARY_CLOUD_SOURCE"
        sudo -u "{{ .chezmoi.username }}" ln -s "$SECONDARY_CLOUD_SOURCE" "$SECONDARY_CLOUD_SYMLINK"
      else
        echo "Warning: $SECONDARY_CLOUD_SYMLINK exists but is not a symlink"
      fi
    elif [[ -L "$SECONDARY_CLOUD_SYMLINK" ]]; then
      echo "Secondary cloud symlink already exists"
    else
      echo "Secondary cloud not found at $SECONDARY_CLOUD_SOURCE"
    fi
{{- end }}

    # Kill and restart processes that need to reload system defaults
    echo "Restarting system processes to apply configuration changes..."

    # Restart processes as the primary user
    sudo -u "{{ .chezmoi.username }}" killall Dock 2>/dev/null || true
    sudo -u "{{ .chezmoi.username }}" killall Finder 2>/dev/null || true
    sudo -u "{{ .chezmoi.username }}" killall SystemUIServer 2>/dev/null || true
    sudo -u "{{ .chezmoi.username }}" killall ControlCenter 2>/dev/null || true
    sudo -u "{{ .chezmoi.username }}" killall cfprefsd 2>/dev/null || true

    # Wait a moment for processes to restart
    sleep 2

    echo "System processes restarted successfully."
  '';

  # Homebrew configuration migrated from shell scripts
  homebrew = {
    enable = true;
    onActivation = {
      autoUpdate = true;
      upgrade = true;
      cleanup = "zap";
    };

    taps = [
    ];

    brews = [
      "snort"                       # Network intrusion detection system
    ];

    casks = [
      "1Password"                   # Password manager and secure vault
      "BetterTouchTool"             # Customize trackpad, mouse, keyboard shortcuts
      "jordanbaird-ice"             # A powerful menu bar management tool
      "Vitamin-R"                   # Personal productivity tool with time boxing
      "alfred"                      # Productivity app and launcher
      "appcleaner"                  # Thoroughly uninstall unwanted apps
      "balenaetcher"                # Flash OS images to SD cards & USB drives
      "banktivity"                  # Personal finance and budget management
      "chatbox"                     # Cross-platform desktop client for ChatGPT API
      "chatgpt"                     # Official ChatGPT desktop app
      "choosy"                      # Smart default browser selector
      "claude"                      # Anthropic's AI assistant desktop app
      "cleanmymac"                  # System cleaner and optimization tool
      "colorsnapper"                # Color picker and palette tool
      "daisydisk"                   # Disk space analyzer with visual interface
      "emacs-app"                   # Emacs text editor with macOS integration
      "firefox"                     # Mozilla web browser
      "flux-app"                    # Blue light filter for eye strain reduction
      "focus"                       # Website and app blocker for productivity
      "garmin-express"              # Garmin device management and updates
      "ghostty"                     # Fast, feature-rich terminal emulator
      "google-chrome"               # Google web browser
      "hazel"                       # Automated file organization and management
      "inSSIDer"                    # WiFi network scanner and analyzer
      "keepassxc"                   # Cross-platform password manager
      "keycastr"                    # Dikarabiner-elementssplay keystrokes on screen for presentations
      "karabiner-elements"          # Powerful keyboard customizer for macOS
      "kitty"                       # Fast, feature-rich terminal emulator
      "libreoffice"                 # Free office suite (Writer, Calc, Impress)
      "little-snitch"               # Network monitoring and firewall
      "logseq"                      # Privacy-first, open-source knowledge base
      "macfuse"                     # File system integration (for FUSE filesystems)
      "monero-wallet"               # Official Monero cryptocurrency wallet
      "mountain-duck"               # Mount cloud storage as local disk
      "obsidian"                    # Knowledge management and note-taking
      "oversight"                   # Monitor camera and microphone access
      "pdf-expert"                  # PDF reader and editor
      "podman-desktop"              # Container management GUI for Podman
      "proton-drive"                # Encrypted cloud storage from Proton
      "proton-pass"                 # Password manager from Proton
      "protonvpn"                   # VPN service from Proton
      "raspberry-pi-imager"         # Official Raspberry Pi image writer
      "rescuetime"                  # Time tracking and productivity analytics
      "send-to-kindle"              # Send documents to Kindle devices
      "shadowsocksx"                # Secure proxy client
      "spamsieve"                   # Spam filter for email applications
      "spotify"                     # Music streaming service
      "tor-browser"                 # Privacy-focused web browser using Tor network
      "transmission"                # Lightweight BitTorrent client
      "unite"                       # Turn websites into native Mac apps
      "utm"                         # Virtual machine manager for macOS
      "viber"                       # Messaging and calling app
      "vlc"                         # Universal media player
      "warp"                        # Modern terminal with AI and collaboration features
      "wezterm"                     # GPU-accelerated cross-platform terminal
      "whatsapp"                    # Messaging app
      "wireshark-app"               # Network protocol analyzer
      "zen"                         # Privacy-focused web browser
      "zenmap"                      # Network discovery and security auditing GUI
      "zoom"                        # Video conferencing and webinars
    ];

    masApps = {
      "Amphetamine" = 937984704;       # Keep Mac awake (prevent sleep)
      "Brother Transfer Express" = 1627217996; # File transfer utility for Brother devices
      "Cyberduck" = 409222199;         # FTP/SFTP client for file transfers
      "Disk Speed Test" = 425264550;   # Measure disk read/write performance
      "Drafts" = 1435957248;           # Quick text capture and automation
      "IP Scanner Ultra" = 404167677;  # Network scanning and device discovery
      "Irvue" = 1039633667;           # Unsplash wallpaper changer
      "Kindle" = 302584613;           # Amazon Kindle e-book reader
      "Medis" = 1579200037;           # Modern Redis GUI client
      "MeetingBar" = 1532419400;      # Menu bar calendar with meeting info
      "Numbers" = 409203825;          # Apple's spreadsheet application
      "OmniFocus" = 1542143627;       # Task management and GTD system
      "Pages" = 409201541;            # Apple's word processor
      "Parcel" = 639968404;           # Package delivery tracking
      "Pixelmator Pro" = 1289583905;  # Professional image editing
      "RAR Extractor and Expander" = 1071663619; # Extract RAR archives
      "SiteSucker" = 442168834;       # Download entire websites offline
      "SketchbookPro" = 1570472288;   # Digital drawing and painting
      "Telegram" = 747648890;         # Secure messaging app
      "Vimlike" = 1584519802;         # Vim-style navigation for macOS
      "Mate Translate" = 1005088137;  # Multi-language translator
      "Jump Desktop" = 524141863;     # Remote desktop client (RDP/VNC)
      "KeyboardMetrics" = 6737981817; # Track typing speed and accuracy
    };
  };

  # macOS user-specific defaults using home-manager's built-in support
  #
  # VALIDATION BEST PRACTICES:
  # 1. Test settings manually first: `defaults write com.apple.finder ShowStatusBar -bool true`
  # 2. Check existing settings: `defaults read com.apple.finder`
  # 3. Use `defaults domains` to see available domains
  # 4. Invalid domains/keys will build but silently fail to apply
  # 5. Some settings require logout/restart to take effect
  # 6. Case sensitivity matters for both domains and keys
  # 7. Not all `defaults` commands have targets.darwin.defaults equivalents
  system.defaults = {
    # Note: Keyboard and input settings moved to user-specific activation script
    # to ensure they don't affect other users on the system

    # Application-specific preferences
    CustomUserPreferences = {
      "com.apple.desktopservices" = {
        # Prevent .DS_Store files on network and USB drives
        DSDontWriteNetworkStores = true;
        DSDontWriteUSBStores = true;
      };

      "com.apple.finder" = {
        ShowExternalHardDrivesOnDesktop = true;
        ShowHardDrivesOnDesktop = false;
        ShowMountedServersOnDesktop = false;
        ShowRemovableMediaOnDesktop = true;
        _FXSortFoldersFirst = true;
        # When performing a search, search the current folder by default
        FXDefaultSearchScope = "SCcf";
        DisableAllAnimations = true;
        NewWindowTarget = "PfDe";
        NewWindowTargetPath = "file://{{ .chezmoi.homeDir }}/Desktop/";
        AppleShowAllExtensions = true;
        FXEnableExtensionChangeWarning = false;
        ShowStatusBar = true;
        ShowPathbar = true;
        WarnOnEmptyTrash = false;
        # Additional settings from original script
        _FXShowPosixPathInTitle = true;
        FXPreferredViewStyle = "Nlsv"; # List view
        FXRemoveOldTrashItems = true; # Auto-remove trash after 30 days
      };

      "com.apple.dock" = {
        autohide = true;
        launchanim = false;
        static-only = false;
        show-recents = false;
        show-process-indicators = true;
        orientation = "left";
        tilesize = 45;
        minimize-to-application = true;
        mineffect = "scale";
        enable-window-tool = false;
        magnification = 20;
        # Mission Control and Spaces behavior
        # Disable automatic rearrangement of spaces based on most recent use
        "mru-spaces" = false;
        # Gesture settings for Aerospace compatibility
        showDesktopGestureEnabled = true;
        showLaunchpadGestureEnabled = false;
        showMissionControlGestureEnabled = true;
        # Hot corners configuration
        # Values correspond to specific macOS actions:
        # 0: No-op (disabled)
        # 2: Mission Control - shows all open windows and spaces
        # 3: Application Windows - shows all windows of current app
        # 4: Desktop - shows desktop by hiding all windows
        # 5: Start Screen Saver
        # 6: Disable Screen Saver
        # 7: Dashboard (deprecated in newer macOS versions)
        # 10: Put Display to Sleep
        # 11: Launchpad - shows app launcher grid
        # 12: Notification Center
        # 13: Lock Screen - immediately locks the screen
        # 14: Quick Note - opens Notes app for quick note-taking
        "wvous-tl-corner" = 2; # Top-left
        "wvous-tr-corner" = 3; # Top-right
        "wvous-bl-corner" = 4; # Bottom-left
        "wvous-br-corner" = 10; # Bottom-right
      };

      "com.apple.ActivityMonitor" = {
        OpenMainWindow = true;
        IconType = 5;
        SortColumn = "CPUUsage";
        SortDirection = 0;
      };

      "com.apple.AdLib" = {
        allowApplePersonalizedAdvertising = false;
      };

      "com.apple.TimeMachine" = {
        DoNotOfferNewDisksForBackup = false;
      };

      # Prevent Photos from opening automatically when devices are plugged in
      "com.apple.ImageCapture" = {
        disableHotPlug = true;
      };

      # Turn on app auto-update
      "com.apple.commerce" = {
        AutoUpdate = true;
      };

      # Window appearance settings
      "com.apple.WindowManager" = {
        # Disable rounded window corners (macOS 13+)
        EnableStandardClickToShowDesktop = false;
        GloballyEnabled = false;
        HideDesktop = false;
        StageManagerHideWidgets = false;
        StandardHideDesktopIcons = false;
        StandardHideWidgets = false;
      };

      # CoreDisplay settings for window appearance
      "com.apple.CoreDisplay" = {
        # Disable window corner rounding at the system level
        CGDisableBacklightInterface = false;
        # This setting controls window corner appearance
        "displays.window-corner-radius" = 0;
      };

      # Global user preferences (keyboard, mouse, input settings)
      ".GlobalPreferences" = {
        # Keyboard repeat settings
        ApplePressAndHoldEnabled = false;
        InitialKeyRepeat = 15;
        KeyRepeat = 2; # Match original script value

        # Mouse/trackpad settings
        "com.apple.mouse.tapBehavior" = 1;
        NSWindowShouldDragOnGesture = true;

        # Window management settings critical for Aerospace
        AppleEnableSwipeNavigateWithScrolls = true;
        AppleMiniaturizeOnDoubleClick = false;
        CGDisableCursorLocationMagnification = false;

        # Trackpad and input settings
        "com.apple.swipescrolldirection" = true; # Disable natural scrolling
        "com.apple.trackpad.forceClick" = false; # Disable force click
        "com.apple.keyboard.fnState" = true; # Function keys as standard

        # Keyboard navigation
        AppleKeyboardUIMode = 2; # Enable full keyboard navigation

        # Document and text settings
        NSDocumentSaveNewDocumentsToCloud = false;
        NSAutomaticCapitalizationEnabled = false;
        NSAutomaticDashSubstitutionEnabled = false;
        NSAutomaticInlinePredictionEnabled = false;
        NSAutomaticPeriodSubstitutionEnabled = false;
        NSAutomaticQuoteSubstitutionEnabled = false;
        NSAutomaticSpellingCorrectionEnabled = false;
        NSAutomaticTextCorrectionEnabled = false;
        WebAutomaticSpellingCorrectionEnabled = false;
        NSUserDictionaryReplacementItems = [];

        # Window appearance settings
        # Disable window corner rounding globally
        AppleWindowTabbingMode = "manual";
        NSWindowResizeTime = 0.001;
        # Try to disable window corner radius
        "com.apple.WindowManager.StandardDesktopPolicy.DisableRoundedCorners" = true;
      };
    };
  };
}
