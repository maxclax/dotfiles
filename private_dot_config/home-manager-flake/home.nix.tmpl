# -*- mode: nix; -*-
{ config, pkgs, ... }:

{
  # Import modular configurations
  imports = [
    ./packages.nix              # Package installations

    #########################################################
    ./programs/zsh.nix           # Zsh configuration
    ./programs/bash.nix          # Bash configuration
    ./programs/vim.nix           # Vim configuration
    ./programs/direnv.nix        # Direnv configuration
    ./programs/atuin.nix         # Atuin configuration
    ./programs/starship.nix      # Starship configuration
    ./programs/ranger.nix        # Ranger configuration
{{- if eq .chezmoi.os "darwin" }}
    ./programs/borders.nix       # Borders window management
    ./programs/espanso.nix       # Espanso service configuration
{{- end }}
  ];

  # Home Manager needs a bit of information about you and the paths it should manage
  home.username = "{{ .chezmoi.username }}";
  home.homeDirectory = "{{ .chezmoi.homeDir }}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  home.stateVersion = "25.05";

  # Let Home Manager install and manage itself
  programs.home-manager.enable = true;

{{- if eq .chezmoi.os "linux" }}
  # Allow unfree packages (handled by nix-darwin on macOS)
  nixpkgs.config.allowUnfree = true;
{{- end }}

  # Font configuration
  fonts.fontconfig.enable = true;

  # Nix configuration
  home.file.".config/nix/nix.conf".source = ./nix.conf;

{{- if eq .chezmoi.os "linux" }}
  # Enable desktop integration for GUI applications (Linux only)
  targets.genericLinux.enable = true;
{{- end }}
}
