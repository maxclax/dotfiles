# -*- mode: nix; -*-
{ config, pkgs, ... }:

{
  # Import modular configurations
  imports = [
    ./packages.nix              # Package installations

    #########################################################
{{- if eq .shell "zsh" }}
    ./programs/zsh.nix           # Zsh configuration
{{- end }}
{{- if eq .shell "fish" }}
    ./programs/fish.nix          # Fish configuration
{{- end }}
    ./programs/bash.nix          # Bash configuration
    ./programs/vim.nix           # Vim configuration
    ./programs/direnv.nix        # Direnv configuration
    ./programs/atuin.nix         # Atuin configuration
    ./programs/starship.nix      # Starship configuration
    ./programs/ranger.nix        # Ranger configuration
{{- if eq .chezmoi.os "darwin" }}
    ./programs/borders.nix       # Borders window management
    ./programs/espanso.nix       # Espanso text expander
{{- end }}
  ];

  # Home Manager needs a bit of information about you and the paths it should manage
  home.username = "{{ .chezmoi.username }}";
  home.homeDirectory = "{{ .chezmoi.homeDir }}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  home.stateVersion = "25.05";

  # Let Home Manager install and manage itself
  programs.home-manager.enable = true;

{{- if or (eq .chezmoi.os "linux") .extraUser }}
  # Allow unfree packages (handled by nix-darwin when extraUser is false)
  nixpkgs.config.allowUnfree = true;
{{- end }}

{{- if or .ephemeral (eq .chezmoi.os "linux") }}
  # Prevent package conflicts in NixOS/containers only
  home.activation = {
    preActivation = ''
      # Remove conflicting packages that might be installed via nix-env
      if command -v nix-env >/dev/null 2>&1; then
        echo "Checking for package conflicts..."
        nix-env -q | grep -E "^(man-db|home-manager)" | while read pkg; do
          echo "Removing conflicting package: $pkg"
          nix-env -e "$pkg" || true
        done
      fi
    '';
  };
{{- end }}

  # Font configuration
  fonts.fontconfig.enable = true;

  # Nix configuration
  home.file.".config/nix/nix.conf".source = ./nix.conf;

{{- if eq .chezmoi.os "linux" }}
  # Enable desktop integration for GUI applications (Linux only)
  targets.genericLinux.enable = true;

  # Zen Browser configuration (Linux only)
  programs.zen-browser = {
    enable = true;
    # Available options: beta, twilight, twilight-official
    # beta = latest beta version with newest features
    variant = "beta";
  };
{{- end }}
}
