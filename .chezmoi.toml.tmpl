{{- $workspace := promptStringOnce . "workspace" "workspace directory" (printf "%s/workspace" .chezmoi.homeDir) -}}
{{- $workspace_extra := promptStringOnce . "workspace_extra" "extra workspace directory" (printf "%s/workspace_extra" .chezmoi.homeDir) -}}
{{- $resources := promptStringOnce . "resources" "resources directory" (printf "%s/workspace/resources" .chezmoi.homeDir) -}}
{{- $primary_cloud := promptStringOnce . "primary_cloud" "primary cloud storage" (printf "%s/primary_cloud" .chezmoi.homeDir) -}}
{{- $secondary_cloud := promptStringOnce . "secondary_cloud" "secondary cloud storage" (printf "%s/secondary_cloud" .chezmoi.homeDir) -}}


{{- $nvimType := "LunarVim" -}}
{{- if stdinIsATTY -}}
  {{- $choices := list "default" "LunarVim" "LazyVim" -}}
  {{- $nvimType = promptChoiceOnce . "nvimType" "What type of NeoVim are you on" $choices -}}
{{- end -}}

{{- $emacsType := "default" -}}
{{- if stdinIsATTY -}}
  {{- $choices := list "default" "Doom" "prelude" "purcell" -}}
  {{- $emacsType = promptChoiceOnce . "emacsType" "What type of Emacs are you on" $choices -}}
{{- end -}}

{{- $editor := "vim" -}}
{{- if stdinIsATTY -}}
  {{- $choices := list "vim" "emacsclient" -}}
  {{- $editor = promptChoiceOnce . "editor" "Which editor do you want to use as default" $choices -}}
{{- end -}}

{{/* boolean feature tags */}}
{{- $ephemeral := false -}}{{/* true if this machine is ephemeral, e.g. a cloud, VM or for short time */}}
{{- $headless := false -}}{{/* true if this machine does not have a screen and keyboard */}}
{{- $personal :=  false -}}{{/* true if this machine should have personal secrets */}}
{{- "" -}}

{{- $osID := .chezmoi.os -}}
{{- if (and (eq .chezmoi.os "linux") (hasKey .chezmoi.osRelease "id")) -}}
{{-   $osID = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.id -}}
{{- end -}}

{{- if eq .chezmoi.os "windows" -}}
{{-   $ephemeral = true -}}
{{- end -}}

{{- $hostname := .chezmoi.hostname -}}
{{- if not $ephemeral -}}
{{-   if or (eq $hostname "space") (contains "space-" $hostname) -}}
{{-     $personal = true -}}
{{-   else if or (eq $hostname "debian") (eq $hostname "ubuntu") (eq $hostname "centos") -}}
{{-     $headless = true -}}
{{-     $personal = true -}}
{{-   else if stdinIsATTY -}}
{{-     $headless = promptBoolOnce . "headless" "Is this machine headless? Without a screen and keyboard?" false -}}
{{-     $ephemeral = promptBoolOnce . "ephemeral" "Is this machine ephemeral? Cloud, VM, or for short time?" false -}}
{{-   else -}}
{{-     $ephemeral = true -}}
{{-     $headless = true -}}
{{-   end -}}
{{- end -}}

{{- $name := "dev" | quote -}}
{{- $email := "dev" | quote -}}
{{- $githubName := "dev" | quote -}} 
{{- $githubEmail := "dev" | quote -}}
{{- $githubGpgsignEnabled := false -}}
{{- $githubGpgsignSigningKey := "" | quote -}}
{{- $githubAccessToken := "" | quote -}}
{{- $githubGpgsignProgram := "" | quote -}}
{{- $borgRepo := "" | quote -}}
{{- $borgEncryptionPassphrase := "" | quote -}}

{{- $useOp := promptBoolOnce . "useOp" "Do you want to use 1Password CLI (op) for configuration?" false -}}
{{- $gitAutoCommit := promptBoolOnce . "gitAutoCommit" "Enable automatic commits?" false -}}
{{- $gitAutoPush := promptBoolOnce . "gitAutoPush" "Enable automatic push?" false -}}

{{- if $useOp -}}
{{-   $githubGpgsignEnabled = promptBoolOnce . "gitGithub.gpgsign.enabled" "Enable GPG signing for Git commits?" false  -}}
{{-   $borgRepo = onepasswordRead "op://Private/chezmoi-data/borg-repo" | quote -}}
{{-   $borgEncryptionPassphrase = onepasswordRead "op://Private/chezmoi-data/borg-encryption-passphrase" | quote -}}
{{-   $name = onepasswordRead "op://Private/chezmoi-data/git-config-name" | quote -}}
{{-   $email = onepasswordRead "op://Private/chezmoi-data/git-config-email" | quote -}}
{{-   $githubName = onepasswordRead "op://Private/chezmoi-data/github-username" | quote -}}
{{-   $githubEmail = onepasswordRead "op://Private/chezmoi-data/github-email"  | quote -}}
{{-   $githubGpgsignSigningKey = onepasswordRead "op://Private/chezmoi-data/github-signing-key" | quote -}}
{{-   $githubAccessToken = onepasswordRead "op://Private/chezmoi-data/github-access-token" | quote -}}
{{-   $githubGpgsignProgram = promptStringOnce . "gitGithub.gpgsign.program" "GPG signing program" "/Applications/1Password.app/Contents/MacOS/op-ssh-sign" | quote -}}
{{- end -}}

encryption = "age"
[age]
    identity = "~/.ssh/dotfiles"
    symmetric = true

[onepassword]
    command = "op"
    prompt = false

[data]
    ephemeral = {{ $ephemeral }}
    headless = {{ $headless }}
    hostname = {{ $hostname | quote }}
    personal = {{ $personal }}
    osid = {{ $osID | quote }}
    unameArch = {{ output "uname" "-m" | trim | quote }}
    extraUser = {{ promptBoolOnce . "extraUser" "Extra user? True if all were instaled by main user" false }}
    useOp = {{ $useOp }}
    gitAutoCommit = {{ $gitAutoCommit }}
    gitAutoPush = {{ $gitAutoPush }}

    workspace = {{ $workspace | quote }}
    workspace_extra = {{ $workspace_extra | quote }}
    resources = {{ $resources | quote }}
    playground = {{ printf "%s/playground" $workspace | quote }}
    jupyter = {{ printf "%s/jupyter" $workspace | quote }}
    primary_cloud = {{ $primary_cloud | quote }}
    secondary_cloud = {{ $secondary_cloud | quote }}
    editor = {{ $editor | quote }}

    borgThisMachine = {{ promptBoolOnce . "borgThisMachine" "Use Borgbackups on this machine?" false }}
    borgRepo = {{ $borgRepo }}
    borgEncryptionPassphrase = {{ $borgEncryptionPassphrase }}
    borgWithPushover = {{ promptBoolOnce . "borgWithPushover" "Use Pushover in Borgbackups?" false }}

    fontsEnabled = {{ promptBoolOnce . "fontsEnabled" "Enable FONTS installation?" false }}
    fontsPath = {{ printf "%s/fonts" $resources | quote }}

    nvimType = {{ $nvimType | quote }}
    nvimLoadAllDistros = {{ promptBoolOnce . "nvimLoadAllDistros" "Load all NeoVim distributions?" false }}

    emacsType = {{ $emacsType | quote }}
    emacsEnabledClient = {{ promptBoolOnce . "emacsEnabledClient" "Enable Emacs client?" false }}
    emacsLoadAllDistros = {{ promptBoolOnce . "emacsLoadAllDistros" "Load all Emacs distributions?" false }}

    podmanEnabled = {{ promptBoolOnce . "podmanEnabled" "Enable Podman container engine?" false }}
    dockerEnabled = {{ promptBoolOnce . "dockerEnabled" "Enable Docker container engine?" false }}
    containerEngine = {{ promptStringOnce . "containerEngine" "Container engine to use (podman or docker)" "podman" | quote }}

    goEnabled = {{ promptBoolOnce . "goEnabled" "Enable Go development environment?" false }}

    rustEnabled = {{ promptBoolOnce . "rustEnabled" "Enable Rust development environment?" false }}

    torproxyHost = {{ promptStringOnce . "torproxyHost" "Tor proxy host" "localhost" | quote }}
    torproxyPortSocks5 = {{ promptIntOnce . "torproxyPortSocks5" "Tor proxy SOCKS5 port" 9150 }}
    torproxyPortDns = {{ promptIntOnce . "torproxyPortDns" "Tor proxy DNS port" 8893 }}

    gitName = {{ $name }} 
    gitEmail = {{ $email }} 
    gitLocalRepositories = {{ printf "%s/.local/git" .chezmoi.destDir | quote }}
    gitGithub.name = {{ $githubName }}
    gitGithub.email = {{ $githubEmail }}
    gitGithub.accessToken = {{ $githubAccessToken }}
    gitGithub.gpgsign.enabled = {{ $githubGpgsignEnabled }}
    gitGithub.gpgsign.signingKey = {{ $githubGpgsignSigningKey }}
    gitGithub.gpgsign.program = {{ $githubGpgsignProgram  }}


[git]
  autoCommit = {{ $gitAutoCommit }}
  autoPush = {{ $gitAutoPush }}
